[
    {
        "prompt": "Create a realistic material in Blender using a standard PBR shader. The material should utilize a set of image textures for its color, roughness, and normal details, with the textures correctly applied using UV coordinates.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: bark_generated\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"bark_generated\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeTexCoord\")\nnode.location = (-1240.0, 300.0)\nnode.parent = nodes.get(\"Frame\")\n\nnode = nodes.new(\"ShaderNodeMapping\")\nnode.location = (-1040.0, 300.0)\nnode.parent = nodes.get(\"Frame\")\n\nnode = nodes.new(\"NodeReroute\")\nnode.location = (-590.0, 45.0)\nnode.width = 16.0\nnode.parent = nodes.get(\"Frame.001\")\nnode.socket_idname = \"NodeSocketVector\"\nnode.inputs[\"Input\"].type = 'VECTOR'\nnode.inputs[\"Input\"].bl_idname = \"NodeSocketVector\"\nnode.inputs[\"Input\"].bl_label = \"Vector\"\nnode.inputs[\"Input\"].default_value = (0.0, 0.0, 0.0)\nnode.outputs[\"Output\"].type = 'VECTOR'\nnode.outputs[\"Output\"].bl_idname = \"NodeSocketVector\"\nnode.outputs[\"Output\"].bl_label = \"Vector\"\nnode.outputs[\"Output\"].default_value = (0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-540.0, -60.0)\nnode.name = \"Image Texture.002\"\nnode.label = \"Normal\"\nnode.parent = nodes.get(\"Frame.001\")\nnode.image = bpy.data.images.get(\"bark_willow_nor_gl_2k.exr.001\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-540.0, 220.0)\nnode.name = \"Image Texture.001\"\nnode.label = \"Roughness\"\nnode.parent = nodes.get(\"Frame.001\")\nnode.image = bpy.data.images.get(\"bark_willow_rough_2k.exr.001\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-540.0, 500.0)\nnode.label = \"Base Color\"\nnode.parent = nodes.get(\"Frame.001\")\nnode.image = bpy.data.images.get(\"bark_willow_diff_2k.jpg.001\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeNormalMap\")\nnode.location = (-240.0, -60.0)\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (10.0, 300.0)\nnode.distribution = 'GGX'\nnode.subsurface_method = 'BURLEY'\nnode.inputs[\"IOR\"].default_value = 1.4500000476837158\n#node.inputs[\"Subsurface Anisotropy\"].enabled = False\nnode.inputs[\"Emission Color\"].default_value = (0.0, 0.0, 0.0, 1.0)\nnode.inputs[\"Emission Strength\"].default_value = 1.0\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (300.0, 300.0)\n\n#Links\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Base Color\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.001\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Roughness\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.002\"].outputs[\"Color\"],\n    nodes[\"Normal Map\"].inputs[\"Color\"]\n    )\n\nlinks.new(\n    nodes[\"Normal Map\"].outputs[\"Normal\"],\n    nodes[\"Principled BSDF\"].inputs[\"Normal\"]\n    )\n\nlinks.new(\n    nodes[\"Reroute\"].outputs[\"Output\"],\n    nodes[\"Image Texture\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Reroute\"].outputs[\"Output\"],\n    nodes[\"Image Texture.001\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Reroute\"].outputs[\"Output\"],\n    nodes[\"Image Texture.002\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Mapping\"].outputs[\"Vector\"],\n    nodes[\"Reroute\"].inputs[\"Input\"]\n    )\n\nlinks.new(\n    nodes[\"Texture Coordinate\"].outputs[\"UV\"],\n    nodes[\"Mapping\"].inputs[\"Vector\"]\n    )\n"
    },
    {
        "prompt": "Create a completely transparent material suitable for an object like a window or a clear eye. The material should be smooth and allow light to pass through it fully.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: clear_eye\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"clear_eye\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (-3.250927686691284, 309.98931884765625)\nnode.inputs[\"Roughness\"].default_value = 0.0\nnode.inputs[\"Transmission Weight\"].default_value = 1.0\n\nnode = nodes.new(\"ShaderNodeValue\")\nnode.location = (271.90350341796875, 136.98312377929688)\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (497.79034423828125, 304.2071533203125)\nnode.inputs[\"Surface\"].show_expanded = True\n\n#Links\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n\nlinks.new(\n    nodes[\"Value\"].outputs[\"Value\"],\n    nodes[\"Material Output\"].inputs[\"Thickness\"]\n    )\n"
    },
    {
        "prompt": "Create a material that emits its own light and can be used as a light source. The material's color and strength should be easily adjustable.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: emission_light\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"emission_light\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeNormalMap\")\nnode.location = (-300.0, -300.0)\nnode.label = \"Normal/Map\"\n\nnode = nodes.new(\"ShaderNodeEmission\")\nnode.location = (10.0, 300.0)\nnode.inputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 1.0)\nnode.inputs[\"Strength\"].default_value = 0.0\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (300.0, 300.0)\nnode.inputs[\"Surface\"].show_expanded = True\n\n#Links\n\nlinks.new(\n    nodes[\"Emission\"].outputs[\"Emission\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n"
    },
    {
        "prompt": "Create a material for realistic hair or fur. It should use different images to control the main color, how shiny it is, and how light passes through it, giving it a soft, lifelike glow.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: eye_brow\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"eye_brow\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-1378.2178955078125, -869.6318359375)\nnode.name = \"Image Texture.001\"\nnode.image = bpy.data.images.get(\"hair_anisotropy_rotation.png.012\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"NodeReroute\")\nnode.location = (-1112.7149658203125, -2049.646728515625)\nnode.width = 16.0\nnode.name = \"Reroute.008\"\n\nnode = nodes.new(\"NodeFrame\")\nnode.location = (-1035.5999755859375, -1123.199951171875)\nnode.width = 2090.39990234375\nnode.height = 1296.400146484375\nnode.label = \"Fake Anisotropy\"\nnode.use_custom_color = True\nnode.color = (0.6000000238418579, 0.6000000238418579, 0.6000000238418579)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-357.8899230957031, 467.0393981933594)\nnode.name = \"Image Texture.005\"\nnode.show_texture = True\nnode.image = bpy.data.images.get(\"hair_sss_value.png.012\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-356.9468994140625, 190.2113800048828)\nnode.name = \"Image Texture.004\"\nnode.image = bpy.data.images.get(\"hair_sss_color.png.012\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-354.29241943359375, -333.7740173339844)\nnode.image = bpy.data.images.get(\"hair_anisotropy.png.012\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-351.4384765625, 744.4252319335938)\nnode.name = \"Image Texture.002\"\nnode.image = bpy.data.images.get(\"hair_diffuse.png.012\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-350.5947570800781, -70.0701904296875)\nnode.name = \"Image Texture.003\"\nnode.image = bpy.data.images.get(\"hair_roughness.png.012\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-344.3995056152344, 1031.590576171875)\nnode.name = \"Image Texture.006\"\nnode.image = bpy.data.images.get(\"hair_specular.png.012\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeNewGeometry\")\nnode.location = (29.7685546875, -444.373046875)\nnode.parent = nodes.get(\"Frame\")\nnode.outputs[\"Position\"].hide = True\nnode.outputs[\"Normal\"].hide = True\nnode.outputs[\"Tangent\"].hide = True\nnode.outputs[\"True Normal\"].hide = True\nnode.outputs[\"Parametric\"].hide = True\nnode.outputs[\"Backfacing\"].hide = True\nnode.outputs[\"Pointiness\"].hide = True\nnode.outputs[\"Random Per Island\"].hide = True\n\nnode = nodes.new(\"ShaderNodeVectorTransform\")\nnode.location = (31.545166015625, -524.340087890625)\nnode.parent = nodes.get(\"Frame\")\nnode.convert_from = 'CAMERA'\nnode.convert_to = 'WORLD'\nnode.inputs[\"Vector\"].default_value = (1.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTangent\")\nnode.location = (200.0020751953125, -619.47705078125)\nnode.width = 218.75131225585938\nnode.name = \"Tangent.002\"\nnode.parent = nodes.get(\"Frame\")\nnode.direction_type = 'UV_MAP'\nnode.uv_map = \"UV_Allignment\"\n\nnode = nodes.new(\"ShaderNodeVectorRotate\")\nnode.location = (275.8187255859375, -402.266357421875)\nnode.parent = nodes.get(\"Frame\")\nnode.inputs[\"Center\"].hide = True\nnode.inputs[\"Angle\"].default_value = -3.4627325534820557\n#node.inputs[\"Rotation\"].hide = True\n\nnode = nodes.new(\"ShaderNodeNewGeometry\")\nnode.location = (277.241455078125, -713.1064453125)\nnode.name = \"Geometry.001\"\nnode.parent = nodes.get(\"Frame\")\nnode.outputs[\"Position\"].hide = True\nnode.outputs[\"Tangent\"].hide = True\nnode.outputs[\"True Normal\"].hide = True\nnode.outputs[\"Incoming\"].hide = True\nnode.outputs[\"Parametric\"].hide = True\nnode.outputs[\"Backfacing\"].hide = True\nnode.outputs[\"Pointiness\"].hide = True\nnode.outputs[\"Random Per Island\"].hide = True\n\nnode = nodes.new(\"ShaderNodeValToRGB\")\nnode.location = (379.18927001953125, -693.5789794921875)\nnode.name = \"ColorRamp.001\"\nramp = node.color_ramp\nramp.elements.foreach_set(\n       \"color\", [\n        0.0, 0.0, 0.0, 1.0,\n        0.10796529054641724, 0.10796529054641724, 0.10796529054641724, 1.0\n        ])\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeMapRange\")\nnode.location = (380.3316650390625, -792.517578125)\nnode.name = \"Map Range.001\"\nnode.parent = nodes.get(\"Frame\")\nnode.inputs[\"To Min\"].default_value = 1.7100000381469727\nnode.inputs[\"To Max\"].default_value = 3.819999933242798\n\nnode = nodes.new(\"ShaderNodeMapRange\")\nnode.location = (384.891845703125, -1027.908935546875)\nnode.parent = nodes.get(\"Frame\")\nnode.inputs[\"To Max\"].default_value = 0.3200001120567322\n\nnode = nodes.new(\"ShaderNodeTangent\")\nnode.location = (390.1179504394531, -947.891357421875)\nnode.width = 218.75131225585938\nnode.name = \"Tangent.003\"\nnode.direction_type = 'UV_MAP'\nnode.uv_map = \"UV_Allignment\"\n\nnode = nodes.new(\"ShaderNodeVectorRotate\")\nnode.location = (632.833984375, -580.4912109375)\nnode.name = \"Vector Rotate.001\"\nnode.parent = nodes.get(\"Frame\")\nnode.inputs[\"Center\"].hide = True\nnode.inputs[\"Angle\"].default_value = 1.5707963705062866\n#node.inputs[\"Rotation\"].hide = True\n\nnode = nodes.new(\"ShaderNodeVectorMath\")\nnode.location = (819.1464233398438, -482.046875)\nnode.name = \"Vector Math.003\"\nnode.parent = nodes.get(\"Frame\")\nnode.operation = 'DOT_PRODUCT'\n#node.outputs[\"Vector\"].enabled = False\n#node.outputs[\"Value\"].enabled = True\n\nnode = nodes.new(\"ShaderNodeMix\")\nnode.location = (841.0948486328125, 180.0)\nnode.data_type = 'RGBA'\nnode.inputs[\"Factor\"].default_value = 0.0\n#node.inputs[\"A\"].enabled = False\n#node.inputs[\"B\"].enabled = False\n#node.inputs[\"A\"].enabled = True\nnode.inputs[\"A\"].default_value = (0.0, 0.0, 0.0, 1.0)\n#node.inputs[\"B\"].enabled = True\nnode.inputs[\"B\"].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)\n#node.outputs[\"Result\"].enabled = False\n#node.outputs[\"Result\"].enabled = True\n\nnode = nodes.new(\"ShaderNodeMath\")\nnode.location = (986.7313842773438, -478.7080078125)\nnode.name = \"Math.031\"\nnode.parent = nodes.get(\"Frame\")\nnode.operation = 'ABSOLUTE'\n#node.inputs[\"Value\"].enabled = False\nnode.inputs[\"Value\"].default_value = 0.0\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (1011.0948486328125, 300.0)\nnode.distribution = 'GGX'\nnode.subsurface_method = 'BURLEY'\nnode.inputs[\"Base Color\"].default_value = (0.0, 0.0, 0.0, 1.0)\nnode.inputs[\"IOR\"].default_value = 1.4500000476837158\nnode.inputs[\"Subsurface Weight\"].default_value = 1.0\nnode.inputs[\"Subsurface Scale\"].default_value = 0.0\n#node.inputs[\"Subsurface Anisotropy\"].enabled = False\nnode.inputs[\"Emission Color\"].default_value = (0.0, 0.0, 0.0, 1.0)\nnode.inputs[\"Emission Strength\"].default_value = 1.0\n\nnode = nodes.new(\"ShaderNodeMath\")\nnode.location = (1159.69091796875, -473.17138671875)\nnode.name = \"Math.033\"\nnode.parent = nodes.get(\"Frame\")\nnode.operation = 'POWER'\nnode.use_clamp = True\nnode.inputs[\"Value\"].default_value = 0.0\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (1335.27783203125, 301.35162353515625)\nnode.is_active_output = False\nnode.target = 'CYCLES'\n\nnode = nodes.new(\"ShaderNodeRGBCurve\")\nnode.location = (1337.0750732421875, -336.35693359375)\nnode.parent = nodes.get(\"Frame\")\nmap = node.mapping\nmap.curves[0].points.foreach_set(\n       \"location\", [\n        0.0, 0.0,\n        1.0, 1.0\n        ])\nmap.curves[1].points.foreach_set(\n       \"location\", [\n        0.0, 0.0,\n        1.0, 1.0\n        ])\nmap.curves[2].points.foreach_set(\n       \"location\", [\n        0.0, 0.0,\n        1.0, 1.0\n        ])\nfor i in range(2):\n    map.curves[3].points.new(0.0, 1.0)\n\nmap.curves[3].points.foreach_set(\n       \"location\", [\n        0.0, 0.37019211053848267,\n        0.26471900939941406, 0.36160698533058167,\n        0.5998827815055847, 0.17101670801639557,\n        1.0, 0.044642865657806396\n        ])\nnode.inputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 1.0)\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"NodeReroute\")\nnode.location = (1347.820556640625, 420.1413879394531)\nnode.width = 16.0\nnode.name = \"Reroute.002\"\n\nnode = nodes.new(\"NodeReroute\")\nnode.location = (1347.820556640625, 459.3471374511719)\nnode.width = 16.0\nnode.name = \"Reroute.001\"\n\nnode = nodes.new(\"NodeReroute\")\nnode.location = (1347.820556640625, 703.22509765625)\nnode.width = 16.0\n\nnode = nodes.new(\"NodeReroute\")\nnode.location = (1349.111083984375, 386.02508544921875)\nnode.width = 16.0\nnode.name = \"Reroute.003\"\n\nnode = nodes.new(\"ShaderNodeAttribute\")\nnode.location = (1400.294677734375, -80.719970703125)\nnode.parent = nodes.get(\"Frame\")\nnode.attribute_name = \"Col_detail\"\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeValToRGB\")\nnode.location = (1624.633544921875, -39.885986328125)\nnode.name = \"ColorRamp.006\"\nnode.parent = nodes.get(\"Frame\")\nramp = node.color_ramp\nfor i in range(1):\n    ramp.elements.new(0.0)\nramp.elements.foreach_set(\n       \"position\", [\n        0.10211268067359924,\n        0.24647879600524902,\n        0.8204221129417419\n        ])\nramp.elements.foreach_set(\n       \"color\", [\n        1.0, 1.0, 1.0, 1.0,\n        0.4999999403953552, 0.4999999403953552, 0.4999999403953552, 1.0,\n        0.0, 0.0, 0.0, 1.0\n        ])\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeMath\")\nnode.location = (1636.49365234375, -416.8125)\nnode.name = \"Math.032\"\nnode.parent = nodes.get(\"Frame\")\nnode.operation = 'MULTIPLY'\nnode.use_clamp = True\nnode.inputs[\"Value\"].default_value = 0.5199999809265137\nnode.inputs[\"Value\"].default_value = 0.0\n\nnode = nodes.new(\"ShaderNodeMix\")\nnode.location = (1788.100341796875, 200.36380004882812)\nnode.name = \"Mix.001\"\nnode.data_type = 'RGBA'\nnode.inputs[\"Factor\"].default_value = 0.0\n#node.inputs[\"A\"].enabled = False\n#node.inputs[\"B\"].enabled = False\n#node.inputs[\"A\"].enabled = True\nnode.inputs[\"A\"].default_value = (0.0, 0.0, 0.0, 1.0)\n#node.inputs[\"B\"].enabled = True\nnode.inputs[\"B\"].default_value = (0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0)\n#node.outputs[\"Result\"].enabled = False\n#node.outputs[\"Result\"].enabled = True\n\nnode = nodes.new(\"ShaderNodeMath\")\nnode.location = (1920.5174560546875, -262.113525390625)\nnode.name = \"Math.034\"\nnode.parent = nodes.get(\"Frame\")\nnode.operation = 'MULTIPLY'\nnode.use_clamp = True\nnode.inputs[\"Value\"].default_value = 0.5199999809265137\nnode.inputs[\"Value\"].default_value = 0.0\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (1958.100341796875, 320.3638000488281)\nnode.width = 244.44781494140625\nnode.name = \"Principled BSDF.001\"\nnode.distribution = 'GGX'\nnode.subsurface_method = 'BURLEY'\nnode.inputs[\"Base Color\"].default_value = (0.0, 0.0, 0.0, 1.0)\nnode.inputs[\"Roughness\"].default_value = 0.48615920543670654\nnode.inputs[\"IOR\"].default_value = 1.4500000476837158\nnode.inputs[\"Subsurface Weight\"].default_value = 1.0\nnode.inputs[\"Subsurface Scale\"].default_value = 0.0\n#node.inputs[\"Subsurface Anisotropy\"].enabled = False\nnode.inputs[\"Emission Color\"].default_value = (0.0, 0.0, 0.0, 1.0)\nnode.inputs[\"Emission Strength\"].default_value = 1.0\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (2302.104248046875, 314.8807373046875)\nnode.name = \"Material Output.001\"\nnode.target = 'EEVEE'\n\n#Links\n\nlinks.new(\n    nodes[\"Image Texture\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Anisotropic\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.001\"].outputs[\"Color\"],\n    nodes[\"ColorRamp.001\"].inputs[\"Fac\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.003\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Roughness\"]\n    )\n\nlinks.new(\n    nodes[\"ColorRamp.001\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Anisotropic Rotation\"]\n    )\n\nlinks.new(\n    nodes[\"Tangent.003\"].outputs[\"Tangent\"],\n    nodes[\"Principled BSDF\"].inputs[\"Tangent\"]\n    )\n\nlinks.new(\n    nodes[\"Tangent.002\"].outputs[\"Tangent\"],\n    nodes[\"Vector Rotate.001\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Vector Math.003\"].outputs[\"Value\"],\n    nodes[\"Math.031\"].inputs[0]\n    )\n\nlinks.new(\n    nodes[\"Math.031\"].outputs[\"Value\"],\n    nodes[\"Math.033\"].inputs[0]\n    )\n\nlinks.new(\n    nodes[\"RGB Curves\"].outputs[\"Color\"],\n    nodes[\"Math.032\"].inputs[0]\n    )\n\nlinks.new(\n    nodes[\"Vector Rotate\"].outputs[\"Vector\"],\n    nodes[\"Vector Math.003\"].inputs[0]\n    )\n\nlinks.new(\n    nodes[\"Vector Transform\"].outputs[\"Vector\"],\n    nodes[\"Vector Rotate\"].inputs[\"Axis\"]\n    )\n\nlinks.new(\n    nodes[\"Geometry\"].outputs[\"Incoming\"],\n    nodes[\"Vector Rotate\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Geometry.001\"].outputs[\"Normal\"],\n    nodes[\"Vector Rotate.001\"].inputs[\"Axis\"]\n    )\n\nlinks.new(\n    nodes[\"Vector Rotate.001\"].outputs[\"Vector\"],\n    nodes[\"Vector Math.003\"].inputs[1]\n    )\n\nlinks.new(\n    nodes[\"Math.033\"].outputs[\"Value\"],\n    nodes[\"RGB Curves\"].inputs[\"Color\"]\n    )\n\nlinks.new(\n    nodes[\"Math.032\"].outputs[\"Value\"],\n    nodes[\"Math.034\"].inputs[0]\n    )\n\nlinks.new(\n    nodes[\"Attribute\"].outputs[\"Fac\"],\n    nodes[\"ColorRamp.006\"].inputs[\"Fac\"]\n    )\n\nlinks.new(\n    nodes[\"ColorRamp.006\"].outputs[\"Color\"],\n    nodes[\"Math.034\"].inputs[1]\n    )\n\nlinks.new(\n    nodes[\"Reroute.008\"].outputs[\"Output\"],\n    nodes[\"Map Range\"].inputs[\"Value\"]\n    )\n\nlinks.new(\n    nodes[\"Math.034\"].outputs[\"Value\"],\n    nodes[\"Principled BSDF.001\"].inputs[\"Specular IOR Level\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.001\"].outputs[\"Color\"],\n    nodes[\"Reroute.008\"].inputs[\"Input\"]\n    )\n\nlinks.new(\n    nodes[\"Reroute.008\"].outputs[\"Output\"],\n    nodes[\"Map Range.001\"].inputs[\"Value\"]\n    )\n\nlinks.new(\n    nodes[\"Map Range.001\"].outputs[\"Result\"],\n    nodes[\"Vector Rotate.001\"].inputs[\"Angle\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.006\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Specular IOR Level\"]\n    )\n\nlinks.new(\n    nodes[\"Reroute.003\"].outputs[\"Output\"],\n    nodes[\"Principled BSDF.001\"].inputs[\"Roughness\"]\n    )\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n\nlinks.new(\n    nodes[\"Principled BSDF.001\"].outputs[\"BSDF\"],\n    nodes[\"Material Output.001\"].inputs[\"Surface\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.002\"].outputs[\"Color\"],\n    nodes[\"Reroute\"].inputs[\"Input\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.005\"].outputs[\"Color\"],\n    nodes[\"Reroute.001\"].inputs[\"Input\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.004\"].outputs[\"Color\"],\n    nodes[\"Reroute.002\"].inputs[\"Input\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.003\"].outputs[\"Color\"],\n    nodes[\"Reroute.003\"].inputs[\"Input\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.002\"].outputs[\"Color\"],\n    nodes[\"Mix\"].inputs[6]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.004\"].outputs[\"Color\"],\n    nodes[\"Mix\"].inputs[7]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.005\"].outputs[\"Color\"],\n    nodes[\"Mix\"].inputs[0]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.005\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Subsurface Scale\"]\n    )\n\nlinks.new(\n    nodes[\"Mix\"].outputs[\"Result\"],\n    nodes[\"Principled BSDF\"].inputs[\"Base Color\"]\n    )\n\nlinks.new(\n    nodes[\"Reroute\"].outputs[\"Output\"],\n    nodes[\"Mix.001\"].inputs[6]\n    )\n\nlinks.new(\n    nodes[\"Reroute.002\"].outputs[\"Output\"],\n    nodes[\"Mix.001\"].inputs[7]\n    )\n\nlinks.new(\n    nodes[\"Reroute.001\"].outputs[\"Output\"],\n    nodes[\"Mix.001\"].inputs[0]\n    )\n\nlinks.new(\n    nodes[\"Reroute.001\"].outputs[\"Output\"],\n    nodes[\"Principled BSDF.001\"].inputs[\"Subsurface Scale\"]\n    )\n\nlinks.new(\n    nodes[\"Mix.001\"].outputs[\"Result\"],\n    nodes[\"Principled BSDF.001\"].inputs[\"Base Color\"]\n    )\n"
    },
    {
        "prompt": "Create a stylized fire or glowing material with a color gradient. The material should transition smoothly from a bright yellow or orange in the center to a darker red on the edges, giving the object a lit-up, burning appearance.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: cube_generated_fire_lantern\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"cube_generated_fire_lantern\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeTexCoord\")\nnode.location = (-512.2546997070312, 280.75091552734375)\n\nnode = nodes.new(\"ShaderNodeMapping\")\nnode.location = (-331.59844970703125, 359.22113037109375)\nnode.inputs[\"Location\"].default_value = (0.19999992847442627, 0.0, 0.0)\nnode.inputs[\"Rotation\"].default_value = (0.0, 1.5707963705062866, 0.0)\nnode.inputs[\"Scale\"].default_value = (1.0, 1.0, 1.3000000715255737)\n\nnode = nodes.new(\"ShaderNodeTexGradient\")\nnode.location = (-156.10372924804688, 280.59161376953125)\nnode.show_texture = True\n\nnode = nodes.new(\"ShaderNodeValToRGB\")\nnode.location = (24.000001907348633, 304.4724426269531)\nramp = node.color_ramp\nramp.elements.foreach_set(\n       \"position\", [\n        0.2436363250017166,\n        0.770909309387207\n        ])\nramp.elements.foreach_set(\n       \"color\", [\n        0.962988018989563, 1.0, 0.026000022888183594, 1.0,\n        1.0, 0.09580865502357483, 0.1007322371006012, 1.0\n        ])\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (303.7956237792969, 343.4322814941406)\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (593.795654296875, 343.4322814941406)\n\n#Links\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n\nlinks.new(\n    nodes[\"Mapping\"].outputs[\"Vector\"],\n    nodes[\"Gradient Texture\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Color Ramp\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Base Color\"]\n    )\n\nlinks.new(\n    nodes[\"Gradient Texture\"].outputs[\"Color\"],\n    nodes[\"Color Ramp\"].inputs[\"Fac\"]\n    )\n\nlinks.new(\n    nodes[\"Texture Coordinate\"].outputs[\"Normal\"],\n    nodes[\"Mapping\"].inputs[\"Vector\"]\n    )\n"
    },
    {
        "prompt": "Create a material that simulates a human eye iris, featuring a detailed, radial pattern and a glossy, wet-looking surface.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: iris_generated\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"iris_generated\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeTexCoord\")\nnode.location = (-1026.843994140625, 282.37127685546875)\n\nnode = nodes.new(\"ShaderNodeTexNoise\")\nnode.location = (-865.1412353515625, 42.90463638305664)\n\nnode = nodes.new(\"ShaderNodeMapping\")\nnode.location = (-856.5115356445312, 334.0043029785156)\nnode.vector_type = 'NORMAL'\nnode.inputs[\"Scale\"].default_value = (1.0, 0.0, 1.0)\n\nnode = nodes.new(\"ShaderNodeMix\")\nnode.location = (-639.7274169921875, 250.78775024414062)\nnode.data_type = 'RGBA'\nnode.inputs[\"Factor\"].default_value = 0.25\n\nnode = nodes.new(\"ShaderNodeTexVoronoi\")\nnode.location = (-447.0313415527344, 299.72637939453125)\nnode.show_texture = True\nnode.inputs[\"Scale\"].default_value = 3.000001907348633\n\nnode = nodes.new(\"ShaderNodeValToRGB\")\nnode.location = (-257.3262023925781, 249.3369903564453)\nramp = node.color_ramp\nramp.elements.foreach_set(\n       \"position\", [\n        0.32363635301589966,\n        1.0\n        ])\nramp.elements.foreach_set(\n       \"color\", [\n        0.06480289995670319, 0.030713483691215515, 0.015996305271983147, 1.0,\n        0.25818151235580444, 0.11193251609802246, 0.05286070331931114, 1.0\n        ])\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (22.2737979888916, 300.0)\nnode.inputs[\"Base Color\"].default_value = (0.002076924778521061, 0.0, 0.8003553152084351, 1.0)\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (312.2738037109375, 300.0)\n\n#Links\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n\nlinks.new(\n    nodes[\"Color Ramp\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Base Color\"]\n    )\n\nlinks.new(\n    nodes[\"Texture Coordinate\"].outputs[\"Object\"],\n    nodes[\"Mapping\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Mapping\"].outputs[\"Vector\"],\n    nodes[\"Mix\"].inputs[4]\n    )\n\nlinks.new(\n    nodes[\"Noise Texture\"].outputs[\"Fac\"],\n    nodes[\"Mix\"].inputs[7]\n    )\n\nlinks.new(\n    nodes[\"Mapping\"].outputs[\"Vector\"],\n    nodes[\"Mix\"].inputs[6]\n    )\n\nlinks.new(\n    nodes[\"Mix\"].outputs[\"Result\"],\n    nodes[\"Voronoi Texture\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Voronoi Texture\"].outputs[\"Distance\"],\n    nodes[\"Color Ramp\"].inputs[\"Fac\"]\n    )\n"
    },
    {
        "prompt": "Create a material that is both transparent and translucent. It should look like frosted glass or a type of see-through plastic that scatters light as it passes through it.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: lantern_paper_generated\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"lantern_paper_generated\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (-391.88165283203125, 302.8250732421875)\nnode.inputs[\"Roughness\"].default_value = 0.0\nnode.inputs[\"Transmission Weight\"].default_value = 1.0\n\nnode = nodes.new(\"ShaderNodeBsdfTranslucent\")\nnode.location = (-102.66951751708984, 148.81661987304688)\n\nnode = nodes.new(\"ShaderNodeMixShader\")\nnode.location = (116.23619079589844, 284.9114074707031)\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (390.24713134765625, 292.9372863769531)\n\n#Links\n\nlinks.new(\n    nodes[\"Translucent BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Mix Shader\"].inputs[2]\n    )\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Mix Shader\"].inputs[1]\n    )\n\nlinks.new(\n    nodes[\"Mix Shader\"].outputs[\"Shader\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n"
    },
    {
        "prompt": "Create a realistic leaf material that uses textures to define its color and surface details. The material should also be thin enough for light to scatter through it, giving it a soft, translucent glow, and have transparent areas to define its shape.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: leave_generated\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"leave_generated\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-640.0, 420.0)\nnode.image = bpy.data.images.get(\"Twig_Leaf_Long_Diffuse_C1.png.002\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-617.2301025390625, 142.96298217773438)\nnode.name = \"Image Texture.001\"\nnode.image = bpy.data.images.get(\"Twig_Leaf_Long_Normal.png.002\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-541.025390625, -169.80352783203125)\nnode.name = \"Image Texture.002\"\nnode.show_texture = True\nnode.image = bpy.data.images.get(\"Twig_Leaf_Long_Opacity.png.002\")\nnode.outputs[\"Color\"].default_value = (0.0, 0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeNormalMap\")\nnode.location = (-320.0, 120.0)\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (10.0, 300.0)\nnode.distribution = 'GGX'\nnode.subsurface_method = 'BURLEY'\nnode.inputs[\"IOR\"].default_value = 1.4500000476837158\n#node.inputs[\"Subsurface Anisotropy\"].enabled = False\nnode.inputs[\"Emission Color\"].default_value = (0.0, 0.0, 0.0, 1.0)\nnode.inputs[\"Emission Strength\"].default_value = 1.0\n\nnode = nodes.new(\"ShaderNodeBsdfTranslucent\")\nnode.location = (84.21241760253906, 456.11737060546875)\n\nnode = nodes.new(\"ShaderNodeBsdfTransparent\")\nnode.location = (440.3087463378906, 128.85995483398438)\n\nnode = nodes.new(\"ShaderNodeMixShader\")\nnode.location = (532.8779907226562, 330.87384033203125)\n\nnode = nodes.new(\"ShaderNodeMixShader\")\nnode.location = (752.8779907226562, 294.0375061035156)\nnode.name = \"Mix Shader.001\"\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (986.9733276367188, 249.90260314941406)\n\n#Links\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Mix Shader\"].inputs[1]\n    )\n\nlinks.new(\n    nodes[\"Image Texture\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Base Color\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.001\"].outputs[\"Color\"],\n    nodes[\"Normal Map\"].inputs[\"Color\"]\n    )\n\nlinks.new(\n    nodes[\"Normal Map\"].outputs[\"Normal\"],\n    nodes[\"Principled BSDF\"].inputs[\"Normal\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.002\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Alpha\"]\n    )\n\nlinks.new(\n    nodes[\"Translucent BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Mix Shader\"].inputs[2]\n    )\n\nlinks.new(\n    nodes[\"Image Texture\"].outputs[\"Color\"],\n    nodes[\"Translucent BSDF\"].inputs[\"Color\"]\n    )\n\nlinks.new(\n    nodes[\"Mix Shader.001\"].outputs[\"Shader\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n\nlinks.new(\n    nodes[\"Transparent BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Mix Shader.001\"].inputs[1]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.002\"].outputs[\"Color\"],\n    nodes[\"Mix Shader.001\"].inputs[\"Fac\"]\n    )\n\nlinks.new(\n    nodes[\"Mix Shader\"].outputs[\"Shader\"],\n    nodes[\"Mix Shader.001\"].inputs[2]\n    )\n"
    },
    {
        "prompt": "Create a material for a pine tree that uses an image to define its color. The material should use the image's transparency to cut out the shape of the pine needles.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: pine_tree_alpha_channel\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"pine_tree_alpha_channel\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-440.0, 210.0)\nnode.label = \"BASE COLOR\"\nnode.image = bpy.data.images.get(\"Image_9.004\")\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (10.0, 300.0)\nnode.inputs[\"Roughness\"].default_value = 0.6000000238418579\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (300.0, 300.0)\n\n#Links\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Base Color\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture\"].outputs[\"Alpha\"],\n    nodes[\"Principled BSDF\"].inputs[\"Alpha\"]\n    )\n"
    },
    {
        "prompt": "Create a detailed road material that uses separate images to define its color, roughness, and surface bumps, giving it a realistic, rough appearance.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: road_texture\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"road_texture\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeTexCoord\")\nnode.location = (-1240.0, 300.0)\nnode.parent = nodes.get(\"Frame\")\n\nnode = nodes.new(\"ShaderNodeMapping\")\nnode.location = (-1040.0, 300.0)\nnode.parent = nodes.get(\"Frame\")\n\nnode = nodes.new(\"NodeReroute\")\nnode.location = (-590.0, 45.0)\nnode.width = 16.0\nnode.parent = nodes.get(\"Frame.001\")\nnode.socket_idname = \"NodeSocketVector\"\nnode.inputs[\"Input\"].type = 'VECTOR'\nnode.inputs[\"Input\"].bl_idname = \"NodeSocketVector\"\nnode.inputs[\"Input\"].bl_label = \"Vector\"\nnode.inputs[\"Input\"].default_value = (0.0, 0.0, 0.0)\nnode.outputs[\"Output\"].type = 'VECTOR'\nnode.outputs[\"Output\"].bl_idname = \"NodeSocketVector\"\nnode.outputs[\"Output\"].bl_label = \"Vector\"\nnode.outputs[\"Output\"].default_value = (0.0, 0.0, 0.0)\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-540.0, -60.0)\nnode.label = \"Displacement\"\nnode.parent = nodes.get(\"Frame.001\")\nnode.image = bpy.data.images.get(\"Road007_2K-JPG_Displacement.jpg.001\")\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-540.0, 220.0)\nnode.name = \"Image Texture.002\"\nnode.label = \"Roughness\"\nnode.parent = nodes.get(\"Frame.001\")\nnode.image = bpy.data.images.get(\"Road007_2K-JPG_Roughness.jpg.001\")\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-540.0, 500.0)\nnode.name = \"Image Texture.001\"\nnode.label = \"Base Color\"\nnode.parent = nodes.get(\"Frame.001\")\nnode.image = bpy.data.images.get(\"Road007_2K-JPG_Color.jpg.001\")\n\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (10.0, 300.0)\n\nnode = nodes.new(\"ShaderNodeDisplacement\")\nnode.location = (110.0, -400.0)\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (300.0, 300.0)\n\n#Links\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture\"].outputs[\"Color\"],\n    nodes[\"Displacement\"].inputs[\"Height\"]\n    )\n\nlinks.new(\n    nodes[\"Displacement\"].outputs[\"Displacement\"],\n    nodes[\"Material Output\"].inputs[\"Displacement\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.001\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Base Color\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.002\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Roughness\"]\n    )\n\nlinks.new(\n    nodes[\"Reroute\"].outputs[\"Output\"],\n    nodes[\"Image Texture.001\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Reroute\"].outputs[\"Output\"],\n    nodes[\"Image Texture.002\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Reroute\"].outputs[\"Output\"],\n    nodes[\"Image Texture\"].inputs[\"Vector\"]\n    )\n\nlinks.new(\n    nodes[\"Mapping\"].outputs[\"Vector\"],\n    nodes[\"Reroute\"].inputs[\"Input\"]\n    )\n\nlinks.new(\n    nodes[\"Texture Coordinate\"].outputs[\"UV\"],\n    nodes[\"Mapping\"].inputs[\"Vector\"]\n    )\n"
    },
    {
        "prompt": "Create a material for a lantern's glass. The material should be dark and smooth, with a semi-transparent.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: rode_lantern_generated\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"rode_lantern_generated\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (10.0, 300.0)\nnode.inputs[\"Base Color\"].default_value = (0.0, 0.0, 0.0, 1.0)\nnode.inputs[\"Roughness\"].default_value = 0.0\nnode.inputs[\"Alpha\"].default_value = 0.43096232414245605\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (300.0, 300.0)\n\n#Links\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n"
    },
    {
        "prompt": "Create a wooden fence material that uses images to define its color and surface texture. The material should have a slightly metallic and rough look, giving it a weathered appearance.",
        "completion": "import bpy\ngroups = {}  # for node groups\n\n#--------------------------------------------\n#  Material: wooden_fence\n#--------------------------------------------\n\nmat = bpy.data.materials.new(\"wooden_fence\")\nmat.use_nodes = True\nnode_tree = mat.node_tree\nnodes = node_tree.nodes\nnodes.clear()\nlinks = node_tree.links\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-600.0, -900.0)\nnode.name = \"Image Texture.001\"\nnode.image = bpy.data.images.get(\"Map #1.004\")\n\nnode = nodes.new(\"ShaderNodeNormalMap\")\nnode.location = (-300.0, -300.0)\nnode.label = \"Normal/Map\"\n\nnode = nodes.new(\"ShaderNodeTexImage\")\nnode.location = (-300.0, 600.0)\nnode.image = bpy.data.images.get(\"Map #3.004\")\n\nnode = nodes.new(\"ShaderNodeBsdfPrincipled\")\nnode.location = (10.0, 300.0)\nnode.inputs[\"Base Color\"].default_value = (0.5882353186607361, 0.5882353186607361, 0.5882353186607361, 1.0)\nnode.inputs[\"Metallic\"].default_value = 1.0\nnode.inputs[\"Roughness\"].default_value = 0.858578622341156\nnode.inputs[\"Specular IOR Level\"].default_value = 0.0\nnode.inputs[\"Emission Color\"].default_value = (0.0, 0.0, 0.0, 1.0)\n\nnode = nodes.new(\"ShaderNodeOutputMaterial\")\nnode.location = (300.0, 300.0)\n\n#Links\n\nlinks.new(\n    nodes[\"Principled BSDF\"].outputs[\"BSDF\"],\n    nodes[\"Material Output\"].inputs[\"Surface\"]\n    )\n\nlinks.new(\n    nodes[\"Normal Map\"].outputs[\"Normal\"],\n    nodes[\"Principled BSDF\"].inputs[\"Normal\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture\"].outputs[\"Color\"],\n    nodes[\"Principled BSDF\"].inputs[\"Base Color\"]\n    )\n\nlinks.new(\n    nodes[\"Image Texture.001\"].outputs[\"Color\"],\n    nodes[\"Normal Map\"].inputs[\"Color\"]\n    )\n"
    }
]